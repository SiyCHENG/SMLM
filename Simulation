from math import pi
from numpy.random import uniform
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.stats import poisson
from scipy.special import erf
import random

class Emitter:
    """
    Class representing an emitter with position, photon count, state, and state frame count.
    """

    def __init__(self, x, y, z, photon_count, state="OFF", state_frame=0):
        # Initialize the emitter with position, photon count, state, and state frame count
        self.x = round(x, 2)
        self.y = round(y, 2)
        self.z = round(z, 2)
        self.photon_count = photon_count
        self.state = state
        self.state_frame = state_frame

    def get_color(self):
        color_map = {
            "OFF": "grey",
            "ON": "yellow",
            "DARK": "grey",
            "BLEACH": "black"
        }
        return color_map.get(self.state, "grey")  # Default color grey

    def get_marker(self):
        marker_map = {
            "BLEACH": 'X'  # BLEACH state uses an 'X' marker
        }
        return marker_map.get(self.state, 'o')  # Default marker circle

    def __repr__(self):
        # String representation of the emitter
        return (f"Emitter(x={self.x}, y={self.y}, z={self.z}, "
                f"photon_count={self.photon_count}, state={self.state}, "
                f"state_frame={self.state_frame})")

def generate_random_emitters(image_size, num_emitters):
    """
    Generates a list of random emitters within a given volume.
    """
    emitters = []
    for _ in range(num_emitters):
        # Generate random positions and a fixed photon count for each emitter
        x = uniform(0, image_size)
        y = uniform(0, image_size)
        z = uniform(-30, 30)
        photon_count = 1
        emitters.append(Emitter(x, y, z, photon_count))
    return emitters

def gaussian_psf(x, y, mu_x, mu_y, mu_z):
    # Define a Gaussian point spread function (PSF)
    d = 28.73435887      # Fixed value for the z-dependence of the standard deviation
    A_x = -0.16380355    # Fixed parameter cubic term in the z-dependence with calculated mount
    A_y = 0.1853064
    B_x = 0.15796493
    B_y = 0.20111577

    lamda_x0 = 1.59443056
    lamda_y0 = 1.53754814

    theta_I0 = 10000

    #theta_z = z - mu_z

    gamma_x = 72.59321698
    gamma_y = 107.04198266

    sigma_x = lamda_x0 * ((1 + ((mu_z)**2) / (d**2) + A_x * ((mu_z)**3) / (d**2) + B_x * ((mu_z)**4) / (d**2))**0.5)
    sigma_y = lamda_y0 * ((1 + ((mu_z)**2) / (d**2) + A_y * ((mu_z)**3) / (d**2) + B_y * ((mu_z)**4) / (d**2))**0.5)

    delta_x = 0.5 * erf(( x - mu_x + 0.5 ) / ( 2 * (sigma_x**2))) - 0.5 * erf(( x - mu_x - 0.5 ) / ( 2 * (sigma_x**2)))
    delta_y = 0.5 * erf(( y - mu_y + 0.5 ) / ( 2 * (sigma_y**2))) - 0.5 * erf(( y - mu_y - 0.5 ) / ( 2 * (sigma_y**2)))

    mu = theta_I0 * delta_x * delta_y

    return mu

def update_emitter(emitters):
    """
    !!! Manage and update emitter statement through each frame, its wrong. !!!
    Updates the state of each emitter based on the given probabilities.
    """
    for emitter in emitters:
        if emitter.state == "OFF":
            if random.uniform(0, 1) < 0.05:
                emitter.state = "ON"
                emitter.state_frame = 0
        elif emitter.state == "ON":
            emitter.state_frame += 1
            last_subframes = np.random.poisson(3)
            if emitter.state_frame > last_subframes * 25:
                if poisson.rvs(1/(3*25)) == 1:
                    emitter.state = "DARK"
                    emitter.state_frame = 0
                else:
                    emitter.state = "BLEACH"
        elif emitter.state == "DARK":
            emitter.state_frame += 1
            last_subframes = np.random.poisson(2.5)
            if emitter.state_frame > last_subframes * 25:
                emitter.state = "ON"
                emitter.state_frame = 0
        elif emitter.state == "BLEACH":
            emitter.state_frame += 1
            last_subframes = np.random.poisson(1.5)
            if emitter.state_frame > last_subframes * 25:
                emitter.state = "ON"
                emitter.state_frame = 0

def calculate_pixel_photons(emitters, x_values, y_values):
    """
    Calculates the photon count for each pixel based on the emitters' states and positions.
    """
    photon_matrix = np.zeros((len(x_values), len(y_values)))

    for i, x in enumerate(x_values):
        for j, y in enumerate(y_values):
            total_photons = 0
            for emitter in emitters:
                if emitter.state == "ON":
                    # Calculate the PSF for each pixel and accumulate the photon count
                    psf = gaussian_psf(x, y, emitter.x, emitter.y, emitter.z)
                    total_photons += psf * emitter.photon_count
            photon_matrix[i, j] = total_photons

    return photon_matrix

def add_noise(photon_matrix, QE, sigma_R, c, EM_gain, eadu, BL, G):
    """
    Cameral noise model

    Calculate the expected chips received photons
    Transfer photon number to electron number by multiply QE and add background constant
    When photons attack chips surface, whether it can be detected by chip is independent and identically distributed
    Through using poisson represent iid
    """

    n_ie = np.random.poisson(photon_matrix * QE + c)

    """
    Simulate EMCCD/sCMOS detector enlarge signal using gamma function
    In electron multipliers such as photomultiplier tubes PMTs, primary electrons strike surface
    producing secondary electons. These secondary electrons then strike other multiplier surface
    potentiallly generating more secondary electons with each impact.
    By repeating this process amplify the signal for EM_gain times around.

    Secondary electrons generate principle make gain become a random process not a fixed scale enlarge.
    """
    gamma_electrons = np.random.gamma(n_ie, EM_gain)

    # Add read noise, modeled as a Gaussian distribution with mean 0 and standard deviation sigma_R
    read_noise = np.random.normal(0, sigma_R, size=photon_matrix.shape)

    # Sum the contributions from the Poisson, Gamma, and Gaussian distributions to get the total noise
    n_oe = gamma_electrons + read_noise

    """
    Convert the total noise to ADU (Analog-to-Digital Units), ensuring the result is within the valid range

    After EMCCD enlarge proces, transfer electrons to digital units ( Analog-to-Digital Units )
    Since we use two bytes save data, the maximum of ADU output will be floor number less than 65535
    """
    ADU_out = np.minimum(np.floor(n_oe/45) + 100, 65535)

    return ADU_out

def print_frames_combined(emitters, num_frames):
    # Generate a grid of x and y values covering the image size
    x_values = np.linspace(0, 24, 25)
    y_values = np.linspace(0, 24, 25)

    for frame in range(num_frames):
        print(f"\nFrame {frame + 1}:")
        update_emitter(emitters)

        photon_matrix = calculate_pixel_photons(emitters, x_values, y_values)
        formatted_matrix = np.around(photon_matrix, decimals=2) 
        print("Photon Matrix:")
        print(formatted_matrix)

        # 3D emitters plot
        fig_3d = plt.figure(figsize=(20, 15))
        ax_3d = fig_3d.add_subplot(1, 3, 1, projection='3d')
        for emitter in emitters:
            color = emitter.get_color()
            marker = emitter.get_marker()
            ax_3d.scatter(emitter.x, emitter.y, emitter.z, color=color, marker=marker)
        ax_3d.set_title("3D Emitters")
        ax_3d.set_xlabel("X Position (nm)")
        ax_3d.set_ylabel("Y Position (nm)")
        ax_3d.set_zlabel("Z Position (nm)")
        plt.show()

        # Photon matrix plot without noise
        plt.figure()
        vmax_photon = np.max(photon_matrix)
        plt.imshow(photon_matrix, origin='lower', cmap='gray', vmin=0, vmax=vmax_photon)
        plt.title("Photon Matrix without Noise")
        plt.colorbar()
        plt.show()

        # Photon matrix plot with noise
        noisy_photon_matrix = add_noise(photon_matrix, QE=0.9, sigma_R=74.4, c=0.002, EM_gain=300, eadu=45, BL=100, G=0.9 * 300 / 45)
        plt.figure()
        vmax_noisy = np.max(noisy_photon_matrix)
        plt.imshow(noisy_photon_matrix, origin='lower', cmap='gray', vmin=90, vmax=vmax_noisy)
        plt.title("Photon Matrix with Noise")
        plt.colorbar()
        plt.show()

# Generate emitters and print frames
emitters = generate_random_emitters(25, 20)
print_frames_combined(emitters, 10)
